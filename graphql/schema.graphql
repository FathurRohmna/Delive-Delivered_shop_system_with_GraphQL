### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  city: String
  country: String
  county: String
  district: String
  id: String
  locationId: String
  zipCode: Int
}

input AddressInputType {
  city: String!
  country: String!
  county: String!
  district: String!
  locationId: String!
  zipCode: Int!
}

type AuthPayload {
  access: Token
  user: User
}

type CountProduct {
  product_length: Int
}

type InvalidUser {
  message: String!
}

union LoginResult = AuthPayload | InvalidUser

type Mutation {
  adminLogin(email: String!, password: String!): LoginResult
  createOrder(address: AddressInputType, productId: String!): Order
  createProduct(descrption: String!, imageUrl: String!, name: String!, price: Int!): Product
  deleteProduct(productId: String!): ProductDeleted
  login(email: String!, password: String!): LoginResult
  signup(email: String!, fullName: String!, password: String!, phone: Int!, username: String!): SignupResult
  updateStatusOrder(orderId: String!, status: String!): Order
  updateUserRole(role: String!, userId: String!): User
}

type Order {
  address: Address
  id: String
  product: Product
  productId: String
  status: String
  user: User
}

type Orders {
  count: OrdersCount
  orders: [Order]
}

type OrdersCount {
  orders_length: Int
}

type Product {
  _count: _CountOrders
  descrption: String
  id: String
  imageUrl: String
  name: String
  price: Int
}

type ProductDeleted {
  message: String!
}

type Products {
  count: CountProduct
  items: [Product]
}

type Query {
  getAllOrders: Orders
  getAllProducts: Products
  getAllUsers: Users
  getProductById(id: String!): Product
  me(id: String!): User
}

enum Role {
  ADMIN
  USER
}

type Shop {
  email: String
  id: String
  name: String
  phone: Int
}

union SignupResult = AuthPayload | UserAlreadyExists

type Token {
  accessToken: String
  accessTokenExpiresAt: String
  refreshToken: String
  refreshTokenExpiresAt: String
}

type User {
  email: String!
  fullName: String!
  id: String!
  orderHistory: [Order]
  phone: Int!
  role: Role
  username: String!
}

type UserAlreadyExists {
  message: String!
}

type Users {
  count: UsersCount
  users: [User]
}

type UsersCount {
  users_length: Int
}

type _CountOrders {
  orders: Int
}
